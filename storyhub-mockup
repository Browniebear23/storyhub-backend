<!-- Unlock Modal Placeholder -->
<div id="unlockModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
  <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 text-center">
    <h3 class="text-xl font-bold mb-4">Unlock Content</h3>
    <p class="mb-6">Choose how you'd like to access this content:</p>
    <div class="space-y-4">
      <div id="payment-request-button" class="my-4"></div>
      <form id="payment-form" class="space-y-4">
        <div id="card-element" class="p-2 border rounded"></div>
        <button id="submit" class="w-full bg-green-600 text-white py-2 rounded hover:bg-green-700">Pay with Card</button>
      </form>
      <p id="payment-message" class="text-sm text-gray-600 mt-2"></p>
      <button id="watchAdsButton" class="w-full bg-yellow-500 text-white py-2 rounded hover:bg-yellow-600">Watch 2 Ads to Unlock</button>
    </div>
    <button onclick="closeUnlockModal()" class="mt-6 text-gray-500 hover:text-gray-700">Cancel</button>
  </div>
</div>

<!-- Ad Modal -->
<div id="adModal" class="hidden fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50">
  <div class="bg-white rounded-lg shadow-lg w-full max-w-lg p-6 text-center">
    <h3 class="text-lg font-semibold mb-4">Sponsored Content</h3>
    <p class="mb-2">Ad <span id="adCounter">1</span> of 2</p>
    <div class="w-full h-48 bg-gray-200 flex items-center justify-center mb-4">
      <video id="adVideoPlayer" width="100%" height="270" playsinline muted></video>
    </div>
    <button id="nextAdBtn" class="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">Next</button>
  </div>
</div>

<script src="https://js.stripe.com/v3/"></script>
<script src="https://imasdk.googleapis.com/js/sdkloader/ima3.js"></script>

<script>
  function closeUnlockModal() {
    document.getElementById('unlockModal').classList.add('hidden');
  }

  document.querySelectorAll('button').forEach(btn => {
    if (btn.textContent.includes('Unlock')) {
      btn.onclick = () => {
        document.getElementById('unlockModal').classList.remove('hidden');
      };
    }
  });

  let adCount = 0;
  const watchAdsButton = document.getElementById('watchAdsButton');
  const adModal = document.getElementById('adModal');
  const adCounter = document.getElementById('adCounter');
  const nextAdBtn = document.getElementById('nextAdBtn');
  const adVideo = document.getElementById('adVideoPlayer');

  let adDisplayContainer, adsLoader, adsManager;

  function initAd() {
    adDisplayContainer = new google.ima.AdDisplayContainer(adModal, adVideo);
    adDisplayContainer.initialize();

    adsLoader = new google.ima.AdsLoader(adDisplayContainer);
    adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED, onAdsManagerLoaded);
    adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR, onAdError);

    const adsRequest = new google.ima.AdsRequest();
    adsRequest.adTagUrl = 'https://pubads.g.doubleclick.net/gampad/ads?sz=640x480&iu=/124319096/external/single_ad_samples&cust_params=sample_ct%3Dlinear&env=vp&gdfp_req=1&output=vast&unviewed_position_start=1&correlator=';
    adsRequest.linearAdSlotWidth = adVideo.clientWidth;
    adsRequest.linearAdSlotHeight = adVideo.clientHeight;

    adsLoader.requestAds(adsRequest);
  }

  function onAdsManagerLoaded(e) {
    adsManager = e.getAdsManager(adVideo);
    adsManager.init(adVideo.clientWidth, adVideo.clientHeight, google.ima.ViewMode.NORMAL);
    adsManager.start();
  }

  function onAdError(error) {
    console.warn('Ad error:', error.getError());
    alert("Ad failed to play.");
    adModal.classList.add('hidden');
  }

  watchAdsButton.onclick = () => {
    closeUnlockModal();
    adCount = 1;
    adCounter.textContent = adCount;
    adModal.classList.remove('hidden');
    initAd();
  };

  nextAdBtn.onclick = () => {
    if (adCount < 2) {
      adCount++;
      adCounter.textContent = adCount;
      initAd();
    } else {
      adModal.classList.add('hidden');
      alert("Content unlocked!");
    }
  };

  // Stripe Integration
  const stripe = Stripe("pk_test_YOUR_PUBLISHABLE_KEY"); // Replace with your actual test/live key
  const elements = stripe.elements();
  const cardElement = elements.create("card");
  cardElement.mount("#card-element");

  const form = document.getElementById("payment-form");
  const message = document.getElementById("payment-message");

  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    const res = await fetch("http://localhost:4242/create-payment-intent", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({})
    });

    const { clientSecret } = await res.json();

    const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
      payment_method: {
        card: cardElement
      }
    });

    if (error) {
      message.textContent = error.message;
    } else if (paymentIntent.status === "succeeded") {
      message.textContent = "Payment successful. Content unlocked!";
      closeUnlockModal();
    }
  });

  // Payment Request Button (Google Pay / Apple Pay)
  const paymentRequest = stripe.paymentRequest({
    country: 'US',
    currency: 'usd',
    total: {
      label: 'Unlock Content',
      amount: 100
    },
    requestPayerName: true,
    requestPayerEmail: true
  });

  const prButton = elements.create('paymentRequestButton', {
    paymentRequest: paymentRequest
  });

  paymentRequest.canMakePayment().then(result => {
    if (result) {
      prButton.mount('#payment-request-button');
    } else {
      document.getElementById('payment-request-button').style.display = 'none';
    }
  });

  paymentRequest.on('paymentmethod', async (ev) => {
    const res = await fetch("http://localhost:4242/create-payment-intent", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({})
    });

    const { clientSecret } = await res.json();

    const { error: confirmError, paymentIntent } = await stripe.confirmCardPayment(
      clientSecret,
      {
        payment_method: ev.paymentMethod.id
      },
      { handleActions: false }
    );

    if (confirmError) {
      ev.complete('fail');
    } else {
      ev.complete('success');
      if (paymentIntent.status === "requires_action") {
        const { error } = await stripe.confirmCardPayment(clientSecret);
        if (error) console.log(error);
      }
      alert("Payment successful. Content unlocked!");
      closeUnlockModal();
    }
  });
</script>
</body>
</html>
